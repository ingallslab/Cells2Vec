import numpy as np
import pandas as pd
import torch
from CellProfilerAnalysis.strain.ProcessCellProfilerData import Dict2Class


def make_numpy_array(pickle_to_dict):

    # definition of dictionary
    property_dict = {'time': [], 'id': [], 'parent': [], 'label': [],
                     'cellType': [], 'divideFlag': [], 'cellAge': [], 'growthRate': [], 'LifeHistory': [],
                     'startVol': [], 'targetVol': [], 'pos': [], 'radius': [], 'length': [], 'dir': [],
                     'ends0': [], 'ends1': [], 'strainRate': [], 'strainRate_rolling': []}

    # fill the dictionary
    for key in pickle_to_dict['cellStates'].keys():
        property_dict['time'].append(pickle_to_dict['cellStates'][key].time)
        property_dict['id'].append(pickle_to_dict['cellStates'][key].id)
        property_dict['label'].append(pickle_to_dict['cellStates'][key].label)
        property_dict['cellType'].append(pickle_to_dict['cellStates'][key].cellType)
        property_dict['divideFlag'].append(pickle_to_dict['cellStates'][key].divideFlag)
        property_dict['cellAge'].append(pickle_to_dict['cellStates'][key].cellAge)
        property_dict['growthRate'].append(pickle_to_dict['cellStates'][key].growthRate)
        property_dict['LifeHistory'].append(pickle_to_dict['cellStates'][key].LifeHistory)
        property_dict['startVol'].append(pickle_to_dict['cellStates'][key].startVol)
        property_dict['targetVol'].append(pickle_to_dict['cellStates'][key].targetVol)
        property_dict['pos'].append(np.sqrt(np.sum(np.power(pickle_to_dict['cellStates'][key].pos, 2))))
        property_dict['radius'].append(pickle_to_dict['cellStates'][key].radius)
        property_dict['length'].append(pickle_to_dict['cellStates'][key].length)
        property_dict['dir'].append(np.arctan2(pickle_to_dict['cellStates'][key].dir[1],
                                               pickle_to_dict['cellStates'][key].dir[0]))
        property_dict['ends0'].append(np.sqrt(np.sum(np.power(pickle_to_dict['cellStates'][key].ends[0], 2))))
        property_dict['ends1'].append(np.sqrt(np.sum(np.power(pickle_to_dict['cellStates'][key].ends[1], 2))))
        property_dict['strainRate'].append(pickle_to_dict['cellStates'][key].strainRate)
        property_dict['strainRate_rolling'].append(pickle_to_dict['cellStates'][key].strainRate_rolling)

    # structure of 'lineage': id : parent id
    for bac_id in property_dict['id']:
        property_dict['parent'].append(pickle_to_dict['lineage'][bac_id])

    # Convert dictionary to pandas DataFrame
    df_bacteria = pd.DataFrame.from_dict(property_dict)

    # Replacing NaN values with 0
    #TODO
    # Maybe we should use a better criterion
    df_bacteria.fillna(0, inplace=True)

    # Convert all columns to float
    df_bacteria = df_bacteria.astype(float)

    return df_bacteria


if __name__ == '__main__':
    pickle_file = 'step-000089.pickle'

    pickle_to_dict = np.load(pickle_file, allow_pickle=True)
    df = make_numpy_array(pickle_to_dict)

    # Convert DataFrame to PyTorch tensor
    tensor = torch.tensor(df.values)

    # write to csv
    df.to_csv('input features.csv', index=False)

    print("Tensor:")
    print(tensor)
